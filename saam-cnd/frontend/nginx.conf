server {
  listen 80;
  server_name localhost;

  root /usr/share/nginx/html;
  index index.html index.htm;

  location / {
    try_files $uri $uri/ /index.html;
  }

  # Opcional: Redirecionar chamadas /api para o backend se não estiver usando o proxy do webpack dev server
  # Isso é mais útil em produção se o Nginx estiver servindo ambos.
  # No nosso docker-compose, o Nginx do frontend não precisa fazer proxy para a API,
  # pois são serviços separados e o frontend fará chamadas diretas para o serviço da API.
  # Mas, se o frontend fosse servido sob o mesmo domínio/porta que a API em um único Nginx,
  # a configuração abaixo seria útil.

  location /api/ {
    proxy_pass http://saam-cnd-api:8080/api/; # Nome do serviço backend no docker-compose e sua porta interna
    proxy_set_header Host $host; # Preserva o Host original da requisição
    proxy_set_header X-Real-IP $remote_addr; # Passa o IP real do cliente
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Lista de IPs pelos quais a requisição passou
    proxy_set_header X-Forwarded-Proto $scheme; # Protocolo original (http ou https)

    # Adicionado para melhor tratamento de WebSockets, se necessário no futuro, e timeouts
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_read_timeout 600s; # Aumentar timeout se houver requisições longas
    proxy_connect_timeout 60s;
  }
}
